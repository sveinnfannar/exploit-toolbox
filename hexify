#!/usr/bin/python2
"""A small tool to 'compile' exploits to shellcode to shellcode

Example usage:
echo "e8 de ad be ef    # call deadbeef
'90' * 28               # create 28 NOPS
rev('ca fe ba be')      # reverse the bytes for little endian machines
" > exploit.in
./hexify exploit.in > exploit.out

Author: Helgi Kristvin
"""

import binascii
import sys
import re


def rev(s):
    return ' '.join(s.split(' ')[::-1])

comment = re.compile(r"#.*$")

if sys.argv[1].strip() != "-":
    data = open(sys.argv[1]).read()
else:
    data = sys.stdin.read()

out = ""

for line in data.splitlines():
    try:
        out += str(eval(re.sub(comment, "", line), ))
    except:
        out += re.sub(comment, "", line)

out = filter(lambda n: n.strip() != "", out)

try:
    sys.stdout.write(binascii.a2b_hex(out))
except:
    sys.stderr.write("Could not convert to hex. Length found was %s. string '%s'\n" % (len(out), out))
